declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)


@.str.0 = constant [4 x i8] c" - \00"
@.str.1 = constant [2 x i8] c"\0A\00"

@a = dso_local global [6 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6]

define dso_local i32 @foo(i32 %a0, i32* %a1) {
b0:
    %v1 = alloca i32
    store i32 %a0, i32* %v1
    %v2 = alloca i32*
    store i32* %a1, i32** %v2
    %v3 = load i32, i32* %v1
    %v4 = load i32*, i32** %v2
    %v5 = getelementptr inbounds i32, i32* %v4, i32 2, 
    %v6 = load i32, i32* %v5
    %v7 = add i32 %v3, %v6
    ret i32 %v7

}

define dso_local i32 @main() {
b8:
    %v9 = alloca [3 x i32]
    %v10 = getelementptr inbounds [3 x i32], [3 x i32]* %v9, i32 0, i32 0
    store i32 1, i32* %v10
    %v11 = getelementptr inbounds i32, i32* %v10, i32 1, 
    store i32 2, i32* %v11
    %v12 = getelementptr inbounds i32, i32* %v10, i32 2, 
    store i32 3, i32* %v12
    %v13 = alloca i32
    %v14 = getelementptr inbounds [6 x i32], [6 x i32]* @a, i32 0, i32 4
    %v15 = load i32, i32* %v14
    %v16 = getelementptr inbounds [6 x i32], [6 x i32]* @a, i32 0, i32 0
    %v17 = call i32 @foo(i32  %v15, i32*  %v16)
    store i32 %v17, i32* %v13

    %v18 = load i32, i32* %v13
    %v19 = getelementptr inbounds [3 x i32], [3 x i32]* %v9, i32 0, i32 0
    %v20 = load i32, i32* %v19
    %v21 = getelementptr inbounds [3 x i32], [3 x i32]* %v9, i32 0, i32 0
    %v22 = call i32 @foo(i32  %v20, i32*  %v21)
    call void @putint(i32  %v18)
    %v23 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.0, i32 0, i32 0
    call void @putstr(i8*  %v23)
    call void @putint(i32  %v22)
    %v24 = getelementptr inbounds [2 x i8], [2 x i8]* @.str.1, i32 0, i32 0
    call void @putstr(i8*  %v24)
    ret i32 0

}

